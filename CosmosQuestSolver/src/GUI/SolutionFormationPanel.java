/*

 */
package GUI;

import Formations.Creature;
import Formations.Formation;
import Skills.Nothing;
import Skills.Skill;
import java.awt.Dimension;
import java.util.LinkedList;
import javax.swing.BoxLayout;
import javax.swing.JPanel;

//shows the solution generated by a solver. Cannot be edited by the user directly
public class SolutionFormationPanel extends JPanel{
    
    private ParameterListener frame;
    private CreaturePicturePanel[] panels;
    private boolean facingRight;

    public SolutionFormationPanel(ParameterListener frame, boolean facingRight, boolean adjustNodes) {
        this.frame = frame;
        this.facingRight = facingRight;
        setLayout(new BoxLayout(this,BoxLayout.X_AXIS));
        
        panels = new CreaturePicturePanel[Formation.MAX_MEMBERS];
        if (facingRight){
            for (int i = Formation.MAX_MEMBERS - 1; i >= 0; i--){
                panels[i] = new CreaturePicturePanel((ParameterListener)frame,null,adjustNodes);
                add(panels[i]);
                panels[i].setPreferredSize(new Dimension(AssetPanel.CREATURE_PICTURE_SIZE,AssetPanel.CREATURE_PICTURE_SIZE));
            }
        }
        else{
            for (int i = 0; i < Formation.MAX_MEMBERS; i++){
                panels[i] = new CreaturePicturePanel((ParameterListener)frame,null,adjustNodes);
                add(panels[i]);
                panels[i].setPreferredSize(new Dimension(AssetPanel.CREATURE_PICTURE_SIZE,AssetPanel.CREATURE_PICTURE_SIZE));
            }
        }
        //setOpaque(false);
        //updateFormation(CosmosQuestSolver.getThisFormation());
    }
    
    public void updateFormation(Formation formation, boolean blankSpacesLast){
        for (int i = 0; i < Formation.MAX_MEMBERS; i++){
            panels[i].setCreature(null);
        }
        for (int i = 0; i < formation.size(); i++){
            if (formation.getEntry(i) != null){
                formation.getEntry(i).setFacingRight(facingRight);
            }
            if (blankSpacesLast){
            panels[i].setCreature(formation.getEntry(i));
            }
            else{
                panels[i-formation.size() + Formation.MAX_MEMBERS].setCreature(formation.getEntry(i));
            }
        }
        revalidate();
        repaint();
    }

    
    public void clearNodes(){
        for (CreaturePicturePanel p : panels){
            p.setNodeSkill(new Nothing(null));
        }
        //frame.parametersChanged();
    }
    
    public void updateFormation(Creature[] creatures) {
        for (int i = 0; i < Formation.MAX_MEMBERS; i ++){
            panels[i].setCreature(creatures[i]);
        }
        revalidate();
        repaint();
    }
    
    public Formation getFormation(){
        Creature[] creatures = new Creature[Formation.MAX_MEMBERS];
        for (int i = 0; i < Formation.MAX_MEMBERS; i++){
            creatures[i] = panels[i].getCreature();
            if (creatures[i] != null){
                creatures[i].setNodeSkill(panels[i].getNodeSkill());
            }
        }
        return new Formation(creatures);
    }


    public Skill[] getNodes() {
        Skill[] nodes = new Skill[Formation.MAX_MEMBERS];
        for (int i = 0; i < Formation.MAX_MEMBERS; i++){
            nodes[i] = panels[i].getNodeSkill().getCopyForNewOwner(null);
        }
        return nodes;
    }

    
    
    
}
