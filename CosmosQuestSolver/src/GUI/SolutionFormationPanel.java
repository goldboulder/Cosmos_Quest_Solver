/*

 */
package GUI;

import Formations.Creature;
import Formations.Formation;
import java.awt.Dimension;
import java.util.LinkedList;
import javax.swing.BoxLayout;
import javax.swing.JPanel;

//shows the solution generated by a solver. Cannot be edited by the user directly
public class SolutionFormationPanel extends JPanel{
    
    
    private CreaturePicturePanel[] panels;
    private boolean facingRight;

    public SolutionFormationPanel(boolean facingRight) {
        this.facingRight = facingRight;
        setLayout(new BoxLayout(this,BoxLayout.X_AXIS));
        
        panels = new CreaturePicturePanel[Formation.MAX_MEMBERS];
        if (facingRight){
            for (int i = Formation.MAX_MEMBERS - 1; i >= 0; i--){
                panels[i] = new CreaturePicturePanel(null);
                add(panels[i]);
                panels[i].setPreferredSize(new Dimension(AssetPanel.CREATURE_PICTURE_SIZE,AssetPanel.CREATURE_PICTURE_SIZE));
            }
        }
        else{
            for (int i = 0; i < Formation.MAX_MEMBERS; i++){
                panels[i] = new CreaturePicturePanel(null);
                add(panels[i]);
                panels[i].setPreferredSize(new Dimension(AssetPanel.CREATURE_PICTURE_SIZE,AssetPanel.CREATURE_PICTURE_SIZE));
            }
        }
        //setOpaque(false);
        //updateFormation(CosmosQuestSolver.getThisFormation());
    }
    
    public void updateFormation(Formation formation){
        for (int i = 0; i < Formation.MAX_MEMBERS; i++){
            if (formation.getEntry(i) != null){
                formation.getEntry(i).setFacingRight(facingRight);
            }
            panels[i].setCreature(formation.getEntry(i));
        }
        revalidate();
        repaint();
    }
    
    public Formation getFormation(){
        LinkedList<Creature> list = new LinkedList<>();
        for (int i = 0; i < Formation.MAX_MEMBERS; i++){
            if (panels[i].getCreature() != null){
                list.add(panels[i].getCreature());
            }
        }
        return new Formation(list);
    }
    
    
}
